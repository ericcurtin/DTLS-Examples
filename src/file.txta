#include <arpa/inet.h>
#include <fcntl.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>

#define BUFFER_SIZE 16384

int main(int argc, char** argv) {
  unsigned char buffer[BUFFER_SIZE];

  if (argc < 2) {
    fprintf(stderr, "Error: usage: ./cat filename\n");
    return (-1);
  }

  int sockfd = socket(AF_INET, SOCK_DGRAM, 0);
  if (sockfd < 0) {
    fprintf(stderr, "socket creation failed\n");
    exit(EXIT_FAILURE);
  }

  struct sockaddr_in servaddr;
  memset(&servaddr, 0, sizeof(servaddr));
  servaddr.sin_family = AF_INET;  // IPv4
  servaddr.sin_addr.s_addr = INADDR_ANY;
  servaddr.sin_port = htons(atoi(argv[3]));

  struct sockaddr_in cliaddr;
  memset(&cliaddr, 0, sizeof(cliaddr));
  socklen_t len = sizeof(cliaddr);

  if (argv[1][0] == 's') {
    if (bind(sockfd, (const struct sockaddr*)&servaddr, sizeof(servaddr)) < 0) {
      fprintf(stderr, "bind failed\n");
      exit(EXIT_FAILURE);
    }

    while (1) {
      ssize_t rf = recvfrom(sockfd, (unsigned char*)buffer, BUFFER_SIZE,
                            MSG_WAITALL, (struct sockaddr*)&cliaddr, &len);
      if (rf < 1) {
        fprintf(stderr, "recvfrom failed %ld\n", rf);
      }

      int file = open(argv[4], O_RDONLY);
      if (file == -1) {
        fprintf(stderr, "Error: %s: file not found\n", argv[4]);
        return (-1);
      }

      ssize_t read_size;
      while ((read_size = read(file, buffer, BUFFER_SIZE)) > 0) {
        if (read_size < BUFFER_SIZE) {
          buffer[read_size] = EOF;
        }

        ssize_t bytes_written =
            sendto(sockfd, (unsigned char*)buffer, read_size, MSG_CONFIRM,
                   (const struct sockaddr*)&cliaddr, len);
        // printf("%ld\n", read_size);
        if (bytes_written != read_size) {
          fprintf(stderr, "Write failed %ld != %ld\n", bytes_written,
                  read_size);
        }
      }

      close(file);
    }
  }

  if (argv[1][0] == 'c') {
    const char* hello = "hello";
    sendto(sockfd, (unsigned char*)hello, strlen(hello), MSG_CONFIRM,
           (const struct sockaddr*)&servaddr, sizeof(servaddr));

    ssize_t n;
    do {
      n = recvfrom(sockfd, (unsigned char*)buffer, BUFFER_SIZE, MSG_WAITALL,
                   (struct sockaddr*)&servaddr, &len);
      write(STDOUT_FILENO, &buffer, n);
    } while (n); // && buffer[n - 1] != EOF);
  }

#if 0
  struct sockaddr_in cliaddr;
  int len = sizeof(cliaddr);  // len is value/resuslt
  unsigned char buffer[BUFFER_SIZE];
  ssize_t n = recvfrom(sockfd, buffer, BUFFER_SIZE, MSG_WAITALL,
                       (struct sockaddr*)&cliaddr, &len);
  ssize_t bytes_written = write(STDOUT_FILENO, &buffer, n);
  if (bytes_written != n) {
    fprintf(stderr, "Write failed %ld != %ld\n", bytes_written, n);
  }
#endif

#if 0
  sendto(sockfd, (const char*)hello, strlen(hello), MSG_CONFIRM,
         (const struct sockaddr*)&cliaddr, len);

  int file = open(argv[2], O_RDONLY);
  if (file == -1) {
    fprintf(stderr, "Error: %s: file not found\n", argv[2]);
    return (-1);
  }

  ssize_t read_size;
  while ((read_size = read(file, buffer, BUFFER_SIZE)) > 0) {
    ssize_t bytes_written = write(STDOUT_FILENO, &buffer, read_size);
    if (bytes_written != read_size) {
      fprintf(stderr, "Write failed %ld != %ld\n", bytes_written, read_size);
    }
  }

  close(file);
#endif

  return 0;
}
